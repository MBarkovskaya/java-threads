package com.threads.examples.practice1;

public class PrintYourNameThread extends Thread {


    public PrintYourNameThread(String name) {
        super(name);
    }

    public void run() {
        for (int i = 0; i < 4; i++) {
            System.out.println(Thread.currentThread().getName());
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                System.out.println("Thread has been interrupted");
            }
        }
    }

}


//-------------------------------------------------------
//        Создать дочерний поток, который бы в течение примерно 2 сек печатал свое
//        имя каждые полсекунды.
//        Сделать это двумя способами:
//        * при помощи расширения класса Thread;
//        * при помощи реализации интерфейса Runnable.
//
//        Вначале должна отработать одна реализация, после ее завершения должна
//        отработать другая реализация.


//    Потоки реализованы в классе java.lang.Thread.
//        Класс Thread реализует интерфейс Runnable, в котором объявлен один
//        метод .run(). Можно исполь зовать конструктор класса Thread без
//        аргументов, а можно использовать один из конструкторов, аргументом в
//        который передаётся имплементация интерфейса Runnable. Поэтому для
//        создания нового потока можно:
//        - создать пользовательский класс, который является наследником
//        Thread и имплементировать в этом классе метод .run(). И затем создать
//        объект данного пользовательского класса-потока;
//        - создать пользовательский класс, который является наследником
//        Thread и имплементировать в этом классе метод .run(). И объект этого
//        класса передать в конструктор Thread(Runnable target) при создании
//        объекта потока;
//        - создать пользовательский класс, который имплементирует интерфейс
//        Runnable, и объект этого класса передать в конструктор Thread(Runnable
//        target) при создании объекта потока;
//        - вызвать конструктор Thread, в который в качестве аргумента
//        передать созданный налету анонимный класс, имплементирующий
//        интерфейс Runnable.
//        Но в любом случае желательно сохранить ссылку на объект потока в
//        переменную, чтобы впоследствии потоком можно было управлять.
